@page "/editor"
@inject NavigationManager NavigationManager;
@using Microsoft.AspNetCore.WebUtilities;
@using EditorOfficeBlazorServer3.Services;
@using EditorOfficeBlazorServer3.Models;
@inject IUsuarioService UsuarioService;
@inject HttpClient Http

<h1>Editor</h1>

<iframe src="@IframeSrc" style="width:100%; height:100vh;" frameborder="0" allowfullscreen></iframe>

@code {
    private string IframeSrc { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        bool isBlankDocument = true;
        string documentTitle = "blank.docx"; // Mantén el título como estaba



        if (queryParams.TryGetValue("plantilla", out var plantillaValue) && !string.IsNullOrWhiteSpace(plantillaValue))
        {
            var primerUsuario = await UsuarioService.GetUsuariosAsync();
            var usuario = primerUsuario.FirstOrDefault();
            var plantilla = plantillaValue.ToString(); // Convierte StringValues a string


            if (usuario != null)
            {
                var baseUri = NavigationManager.BaseUri;
                var response = await Http.PostAsJsonAsync("api/ProcessTemplate", new
                {
                    Nombre = usuario.Nombre,
                    Cedula = usuario.Cedula,
                    Direccion = usuario.Direccion,
                    TemplateName = plantilla
                });

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("response.IsSuccessStatusCode");
                    // Si la solicitud es exitosa, obtiene el nombre del archivo modificado del controlador
                    var modifiedFileName = await response.Content.ReadAsStringAsync();
                    modifiedFileName = modifiedFileName.Trim('"');
                    isBlankDocument = false;
                    documentTitle = modifiedFileName;
                    Console.WriteLine("documentTitle");
                    Console.WriteLine(documentTitle);
                }

                if (!response.IsSuccessStatusCode)
                {
                    var problemDetails = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(problemDetails);
                    // Considera mostrar este mensaje en la interfaz de usuario para diagnosticar el problema.
                }
            }

        }

        // Suponiendo que obtienes los datos del primer usuario como ejemplo

        IframeSrc = BuildIframeSrc(isBlankDocument, documentTitle);
    }

    private string BuildIframeSrc(bool isBlankDocument, string documentTitle)
    {
        string baseUrl = "onlyoffice.html";
        string encodedTitle = Uri.EscapeDataString(documentTitle);


        return $"{baseUrl}?isBlank={isBlankDocument}&title={encodedTitle}";
    }
}
